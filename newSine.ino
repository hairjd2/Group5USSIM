#include <Wire.h>
#include <Adafruit_MCP4725.h>
#include <math.h>

#define DAC_ADDRESS 0x62 // MCP4725 I2C address

Adafruit_MCP4725 dac;

#define T_MIN 461.25
#define T_MAX 153.75
const double OMEGA_T_MIN = sin(1626.01626 * T_MIN + (2*PI));
const double OMEGA_T_MAX = sin(1626.01626 * T_MAX + (2*PI));

const uint16_t lookup[] =
{
1192,
1154,
1180,
1160,
1171,
1176,
1169,
1199,
1173,
1225,
1181,
1247,
1189,
1258,
1195,
1255,
1196,
1235,
1193,
1202,
1187,
1160,
1182,
1120,
1183,
1092,
1193,
1084,
1213,
1102,
1241,
1146,
1270,
1213,
1288,
1292,
1283,
1372,
1236,
1441,
1120,
1488,
863,
1509,
0,
1529,
4095,
1444,
1783,
1394,
1384,
1334,
1186,
1277,
1075,
1232,
1025,
1203,
1023,
1190,
1055,
1190,
1108,
1198,
1168,
1206,
1220,
1209,
1256,
1206,
1272,
1195,
1267,
1180,
1248,
1166,
1219,
1157,
1191,
1156,
1168,
1164,
1155,
1179,
1154,
1199,
1161,
1217,
1174,
1230,
1187,
1234,
1198,
1228,
1204,
1214,
1206,
1196,
1203,
1177,
1198,
1163,
1194,
1156,
1192,
1158,
1193,
1167,
1195,
1182,
1198,
1198,
1200,
1211,
1199,
1219,
1195,
1220,
1189,
1215,
1182,
1205,
1177,
1194,
1175,
1184,
1178,
1178,
1184,
1176,
1193,
1178,
1203,
1183,
1210,
1189,
1214,
1194,
1212,
1197,
1206,
1198,
1196,
1197,
1186,
1195,
1177,
1193,
1172,
1192,
1172,
1193,
1177,
1195,
1184,
1197,
1194,
1198,
1202,
1197,
1207,
1195,
1209,
1191,
1207,
1186,
1201,
1182,
1195,
1181,
1189,
1182,
1184,
1186,
1183,
1192,
1184,
1198,
1186,
1204,
1190,
1207,
1193,
1207,
1195,
1203,
1195,
1197,
1195,
1189,
1193,
1183,
1192,
1179,
1192,
1178,
1193,
1181,
1195,
1186,
1196,
1192,
1197,
1198,
1197,
1202,
1195,
1204,
1192,
1203,
1188,
1199,
1185,
1195,
1183,
1191,
1184,
1187,
1186,
1186,
1191,
1186,
1196,
1188,
1201,
1190,
1203,
1192,
1204,
1194,
1201,
1194,
1197,
1193,
1191,
1193,
1186,
1192,
1183,
1192,
1181,
1193,
1183,
1194,
1186,
1196,
1191,
1197,
1196,
1197,
1199,
1195,
1201,
1193,
1200,
1189,
1198,
1187,
1195,
1185,
1192,
1185,
1189,
1187,
1188,
1190,
1188,
1194,
1189,
1198,
1191,
1201,
1192,
1202,
1193,
1200,
1193,
1197,
1193,
1192,
1192,
1188,
1192,
1185,
1192,
1184,
1193,
1184,
1194,
1187,
1195,
1191,
1196,
1194,
1196,
1197,
1195,
1199,
1193,
1199,
1190,
1197,
1188,
1195,
1186,
1192,
1186,
1190,
1187,
1189,
1190,
1189,
1193,
1190,
1197,
1191,
1199,
1192,
1200,
1193,
1199,
1193,
1197,
1192,
1193,
1192,
1190,
1191,
1187,
1192,
1185,
1192,
1186,
1194,
1187,
1195,
1190,
1196,
1193,
1196,
1196,
1195,
1197,
1194,
1198,
1191,
1197,
1189,
1195,
1187,
1193,
1186,
1191,
1187,
1190,
1190,
1190,
1193,
1191,
1196,
1191,
1198,
1192,
1199,
1192,
1199,
1192,
1197,
1192,
1194,
1191,
1191,
1191,
1188,
1191,
1187,
1192,
1186,
1193,
1188,
1195,
1190,
1196,
1193,
1196,
1195,
1195,
1196,
1194,
1197,
1192,
1196,
1189,
1195,
1188,
1193,
1187,
1192,
1188,
1191,
1189,
1191,
1192,
1191,
1195,
1192,
1197,
1192,
1198,
1192,
1198,
1192,
1197,
1192,
1194,
1191,
1191,
1191,
1189,
1191,
1188,
1192,
1187,
1193,
1188,
1195,
1190,
1196,
1192,
1196,
1194,
1196,
1195,
1194,
1196,
1192,
1195,
1190,
1194,
1188,
1193,
1187,
1192,
1188,
1191,
1189,
1191,
1191,
1192,
1194,
1192,
1196,
1192,
1197,
1192,
1198,
1192,
1197,
1192,
1194,
1191,
1192,
1191,
1190,
1191,
1188,
1192,
1188,
1193,
1189,
1194,
1190,
1195,
1192,
1196,
1193,
1196,
1195,
1194,
1195,
1193,
1195,
1191,
1194,
1189,
1193,
1188,
1192,
1188,
1192,
1189,
1192,
1191,
1192,
1193,
1192,
1195,
1192,
1197,
1192,
1197,
1192,
1196,
1192,
1195,
1191,
1193,
1191,
1191,
1191,
1189,
1192,
1189,
1193,
1189,
1194,
1190,
1195,
1192,
1196,
1193,
1196,
1194,
1195,
1195,
1193,
1195,
1191,
1194,
1189,
1193,
1188,
1192,
1188,
1192,
1189,
1192,
1191,
1192,
1193,
1192,
1195,
1193,
1196,
1193,
1197,
1192,
1196,
1192,
1195,
1191,
1193,
1191,
1191,
1191,
1190,
1191,
1189,
1192,
1189,
1194,
1190,
1195,
1191,
1196,
1193,
1196,
1194,
1195,
1194,
1193,
1194,
1192,
1194,
1190,
1193,
1189,
1193,
1188,
1192,
1189,
1192,
1191,
1192,
1192,
1193,
1194,
1193,
1196,
1193,
1196,
1192,
1196,
1192,
1195,
1191,
1193,
1191,
1192,
1191,
1190,
1191,
1190,
1192,
1190,
1193,
1190,
1195,
1191,
1195,
1192,
1196,
1193,
1195,
1194,
1194,
};

void setup() {
  Wire.begin();
  dac.begin(DAC_ADDRESS);
  dac.setVoltage(0, false); // set initial DAC output to 0V
  Serial.begin(9600);
  delay(25);

    // for (int i = 0; i < 616; i++){
    //   dac.setVoltage(lookup[i], false);
    //   delayMicroseconds(1000);
    // }
}

double generate_sinx(int scanTo, int level, double thetaT, double thetaR, double thetaBW){
    double x;
    double sinXoX;

    if (scanTo && level){
        x = PI * (((thetaT + (T_MAX/50.0)) - thetaR)/(1.15 * thetaBW));
    }
    else if (scanTo && !level){
        x = PI * (((thetaT + (T_MIN/50.0)) - thetaR)/(1.15 * thetaBW));
    }
    else if (!scanTo && level){
        x = PI * (((thetaT - (T_MAX/50.0)) - thetaR)/(1.15 * thetaBW));
    }
    else{
        x = PI * (((thetaT - (T_MIN/50.0)) - thetaR)/(1.15 * thetaBW));
    }

    sinXoX = sin(x)/x;
    return sinXoX;
}

double generate_wave(int scanTo, int t, double thetaT, double thetaR, double thetaBW){
    double x;
    double sinXoX;
    double wave;

    if(scanTo){
        x = PI * (((thetaT + (t/50.0)) - thetaR)/(1.15 * thetaBW));
    }
    else{
        x = PI * (((thetaT - (t/50.0)) - thetaR)/(1.15 * thetaBW));
    }

    sinXoX = sin(x)/x;
    wave = sinXoX * sin(1626.01626 * t + (2*PI));
    return wave;
}

void loop(){
    // double wave;
    // long waveLong;
    // int mappedWave;
    // double sinXoXMax = generate_sinx(1, 1, -1.082, -0.1745, 0.034);
    // double sinXoXMin = generate_sinx(1, 0, -1.082, -0.1745, 0.034);

    // for (int i = 0; i < 616; i++){
    //     //wave = generate_wave(1, i, -1.082, -0.1745, 0.034);
    //     //waveLong = wave * pow(10, 5);
    //     //mappedWave = map(waveLong, -0.342*pow(10, 5), 0.832*pow(10, 5), 0, 4095);
    //     dac.setVoltage(lookup[i], false);
    //     //delayMicroseconds(1000);
    // }
    for (int i = 0; i < 616; i++){
      dac.setVoltage(lookup[i], false);
      delayMicroseconds(2);
    }
}