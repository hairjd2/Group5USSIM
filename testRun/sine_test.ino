#include <Wire.h>
#include <Adafruit_MCP4725.h>
#include <math.h>
// #include <AZ.h>

#define DAC_ADDRESS 0x62 // MCP4725 I2C address

Adafruit_MCP4725 dac;
double theta_R = -10 * PI/180;
int SCAN_TO = 1;
double theta_BW = 2* PI/180;
double theta_min = -62* PI/180;
double theta_max = 62* PI/180;
double max_SINX;
double min_SINX;
double min_OMEGAT = sin(1626.01626 * 461.25 + (2*PI)) ;
double max_OMEGAT = sin(1626.01626 * 153.75 + (2*PI)) ;

double data[1000] = {
2137,
2135,
2146,
2125,
2147,
2133,
2137,
2136,
2144,
2126,
2148,
2132,
2137,
2137,
2143,
2127,
2148,
2132,
2137,
2138,
2141,
2128,
2148,
2132,
2137,
2140,
2139,
2130,
2147,
2132,
2137,
2141,
2137,
2132,
2146,
2132,
2136,
2142,
2134,
2134,
2145,
2132,
2136,
2144,
2132,
2137,
2143,
2133,
2136,
2145,
2130,
2139,
2141,
2133,
2136,
2145,
2128,
2142,
2139,
2134,
2136,
2146,
2126,
2144,
2137,
2135,
2136,
2146,
2125,
2147,
2135,
2136,
2136,
2146,
2124,
2149,
2133,
2137,
2136,
2146,
2123,
2150,
2131,
2138,
2136,
2145,
2123,
2152,
2129,
2139,
2137,
2144,
2124,
2152,
2128,
2140,
2137,
2142,
2125,
2153,
2127,
2140,
2138,
2140,
2127,
2152,
2126,
2141,
2139,
2138,
2129,
2151,
2126,
2141,
2140,
2136,
2131,
2150,
2126,
2141,
2140,
2134,
2134,
2148,
2126,
2141,
2141,
2132,
2137,
2145,
2127,
2141,
2142,
2130,
2140,
2143,
2129,
2141,
2142,
2128,
2143,
2140,
2130,
2141,
2143,
2126,
2147,
2136,
2132,
2140,
2143,
2124,
2150,
2133,
2134,
2140,
2143,
2123,
2152,
2130,
2137,
2139,
2143,
2123,
2154,
2127,
2139,
2138,
2143,
2122,
2156,
2124,
2141,
2138,
2142,
2123,
2157,
2122,
2143,
2137,
2141,
2124,
2158,
2120,
2145,
2137,
2140,
2126,
2157,
2118,
2147,
2136,
2138,
2128,
2156,
2118,
2148,
2136,
2136,
2131,
2154,
2118,
2149,
2136,
2134,
2134,
2151,
2119,
2150,
2136,
2132,
2137,
2148,
2120,
2150,
2136,
2131,
2141,
2144,
2122,
2149,
2136,
2129,
2145,
2140,
2125,
2149,
2137,
2127,
2149,
2135,
2129,
2147,
2137,
2125,
2153,
2130,
2133,
2146,
2137,
2124,
2156,
2125,
2137,
2144,
2138,
2124,
2159,
2121,
2141,
2141,
2138,
2123,
2161,
2116,
2146,
2139,
2138,
2124,
2163,
2113,
2150,
2137,
2138,
2124,
2163,
2109,
2154,
2134,
2138,
2126,
2163,
2107,
2158,
2132,
2137,
2128,
2162,
2106,
2161,
2129,
2137,
2131,
2160,
2106,
2163,
2127,
2136,
2134,
2156,
2107,
2165,
2126,
2135,
2138,
2152,
2109,
2165,
2125,
2134,
2142,
2146,
2112,
2165,
2124,
2133,
2147,
2140,
2117,
2163,
2124,
2132,
2152,
2133,
2123,
2161,
2124,
2131,
2156,
2126,
2130,
2157,
2124,
2129,
2161,
2118,
2137,
2153,
2126,
2128,
2165,
2110,
2146,
2147,
2127,
2128,
2169,
2102,
2155,
2141,
2129,
2127,
2171,
2095,
2164,
2134,
2132,
2128,
2173,
2089,
2174,
2127,
2134,
2128,
2174,
2083,
2182,
2119,
2137,
2130,
2173,
2079,
2191,
2111,
2140,
2132,
2171,
2077,
2198,
2103,
2143,
2135,
2166,
2077,
2204,
2096,
2145,
2139,
2160,
2079,
2208,
2089,
2148,
2143,
2152,
2084,
2211,
2083,
2150,
2149,
2141,
2092,
2210,
2078,
2152,
2156,
2127,
2104,
2207,
2074,
2154,
2165,
2110,
2120,
2201,
2072,
2155,
2174,
2090,
2141,
2190,
2072,
2156,
2185,
2065,
2169,
2174,
2074,
2156,
2199,
2034,
2205,
2150,
2079,
2156,
2215,
1993,
2255,
2115,
2089,
2155,
2236,
1937,
2328,
2061,
2106,
2154,
2267,
1848,
2451,
1964,
2138,
2153,
2325,
1667,
2722,
1731,
2225,
2154,
2508,
957,
4095,
0,
3584,
2010,
948,
4020,
405,
3162,
1828,
2140,
1993,
2589,
1543,
2593,
1958,
2140,
2094,
2356,
1796,
2435,
2003,
2138,
2134,
2255,
1915,
2354,
2029,
2136,
2156,
2196,
1988,
2301,
2047,
2135,
2170,
2157,
2039,
2262,
2062,
2133,
2179,
2130,
2078,
2231,
2076,
2132,
2184,
2110,
2108,
2205,
2087,
2131,
2188,
2095,
2132,
2183,
2098,
2130,
2189,
2084,
2151,
2164,
2107,
2130,
2188,
2078,
2166,
2149,
2116,
2130,
2186,
2074,
2177,
2135,
2123,
2130,
2182,
2073,
2185,
2124,
2130,
2131,
2178,
2074,
2191,
2116,
2135,
2132,
2173,
2077,
2194,
2109,
2140,
2134,
2167,
2082,
2194,
2105,
2144,
2136,
2160,
2088,
2192,
2102,
2146,
2137,
2154,
2095,
2189,
2101,
2148,
2139,
2147,
2103,
2184,
2101,
2149,
2141,
2141,
2112,
2179,
2102,
2150,
2143,
2135,
2120,
2172,
2105,
2150,
2144,
2129,
2128,
2165,
2109,
2149,
2146,
2124,
2136,
2157,
2113,
2148,
2147,
2120,
2144,
2149,
2117,
2147,
2147,
2117,
2150,
2142,
2122,
2145,
2148,
2114,
2156,
2135,
2127,
2144,
2148,
2113,
2161,
2129,
2132,
2142,
2147,
2112,
2164,
2124,
2136,
2141,
2146,
2113,
2166,
2119,
2140,
2139,
2145,
2114,
2167,
2116,
2144,
2138,
2144,
2116,
2167,
2113,
2147,
2137,
2142,
2118,
2166,
2112,
2149,
2136,
2140,
2122,
2164,
2111,
2151,
2136,
2138,
2125,
2161,
2112,
2152,
2135,
2136,
2129,
2158,
2113,
2153,
2135,
2134,
2133,
2154,
2115,
2152,
2135,
2132,
2137,
2149,
2118,
2152,
2135,
2131,
2141,
2145,
2122,
2151,
2136,
2129,
2145,
2140,
2125,
2149,
2136,
2128,
2148,
2135,
2129,
2147,
2136,
2127,
2151,
2131,
2133,
2145,
2137,
2127,
2153,
2127,
2137,
2143,
2137,
2127,
2155,
2124,
2140,
2141,
2137,
2127,
2155,
2121,
2144,
2139,
2137,
2128,
2156,
2119,
2147,
2137,
2138,
2129,
2155,
2118,
2149,
2135,
2137,
2130,
2154,
2118,
2151,
2133,
2137,
2132,
2152,
2118,
2152,
2132,
2137,
2134,
2150,
2119,
2153,
2131,
2137,
2136,
2148,
2120,
2153,
2131,
2136,
2138,
2145,
2122,
2152,
2130,
2136,
2140,
2142,
2125,
2151,
2130,
2136,
2142,
2139,
2128,
2150,
2131,
2135,
2143,
2135,
2131,
2148,
2131,
2135,
2145,
2133,
2134,
2146,
2132,
2135,
2146,
2130,
2137,
2143,
2132,
2135,
2147,
2127,
2140,
2141,
2133,
2134,
2148,
2126,
2143,
2139,
2134,
2135,
2148,
2124,
2146,
2136,
2135,
2135,
2148,
2123,
2148,
2134,
2136,
2135,
2147,
2123,
2150,
2132,
2137,
2136,
2146,
2123,
2151,
2131,
2138,
2136,
2145,
2123,
2151,
2129,
2139,
2137,
2143,
2125,
2151,
2128,
2139,
2138,
2142,
2126,
2151,
2128,
2140,
2138,
2140,
2128,
2150,
2128,
2140,
2139,
2138,
2130,
2149,
2128,
2140,
2140,
2136,
2133,
2147,
2128,
2140,
2141,
2134,
2135,
2145,
2129,
2140,
2141,
2132,
2138,
2143,
2130,
2140,
2142,
2131,
2140,
2141,
2132,
2139,
2142,
2129,
2143,
2138,
2133,
2139,
2142,
2128,
2145,
2136,
2134,
2139,
2142,
2128,
2146,
2134,
2136,
2138,
2142,
2127,
2148,
2132,
2137,
2138,
2142,
2127,
2149,
2130,
2139,
2138,
2141,
2128,
2149,
2129,
2140,
2137,
2140,
2128,
2149,
2128,
2141,
2137,
2139,
2130,
2149,
2127,
2142,
2137,
2138,
2131,
2148,
2127,
2142,
2137,
2137,
2132,
2147,
2127,
2143,
2137,
2136,
2134,
2146,
2128,
2143,
2137,
2135,
2136,
2144,
2129,
2143,
2137,
2134,
2138,
2142,
2130,
2143,
2137,
2133,
2140,
2140,
2131,
2142,
2138,
2133,
2141,
2138,
2133,
2142,
2138,
2132,
2143,
2136,
2134,
2141,
2138,
2132,
2144,
2134,
2136,
2140,
2138,
2131,
2145,
2132,
2138,
2139,
2138,
2131,
2146,
2131,
2139,
2138,
2138,
2132,
2147,
2129,
2141,
2138,
2138,
2132,
};

void setup() {
  Wire.begin();
  dac.begin(DAC_ADDRESS);
  dac.setVoltage(0, false); // set initial DAC output to 0V
  Serial.begin(9600);
  delay(25);
  // generate_sinx();
}

void generate_sinx(){
    double q1 = 153.75;
    double q3 = 461.25;
    double x_max;
    double x_min;
    double temp_min;
    double temp_max;
    if (SCAN_TO)
    {
        x_max = PI * ((theta_min + q1/50.0) - theta_R) / (1.15*theta_BW);
        x_min = PI * ((theta_min + q3/50.0) - theta_R) / (1.15*theta_BW);
        temp_min = (sin(x_min)/x_min);
        temp_max = (sin(x_max)/x_max);
        min_SINX = temp_min;
        max_SINX = temp_max;
    }else{
        x_max = PI * ((theta_max - q1/50.0) - theta_R) / (1.15*theta_BW);
        x_min = PI * ((theta_max - q3/50.0) - theta_R) / (1.15*theta_BW);
        temp_min = (sin(x_min)/x_min);
        temp_max = (sin(x_max)/x_max);
        min_SINX = temp_min;
        max_SINX = temp_max;
    }
}

double generate_wave(float t){
    double x;
    double SINX;
    if (SCAN_TO)
    {
        x = PI * ((theta_min + t/50.0) - theta_R) / (1.15*theta_BW);
        SINX = (sin(x)/x);
    }else{
        x = PI * ((theta_max - t/50.0) - theta_R) / (1.15*theta_BW);
        SINX = (sin(x)/x);
    }

    if(t == 154) Serial.println(SINX * sin(1626.01626 * t + (2*PI)), DEC);
    return SINX * sin(1626.01626 * t + (2*PI));
}

void loop() {
  // for (int t = 0; t < 10000; t++) { // generate a full sine wave cycle
  //   double sinValue = generate_wave(t); // calculate sine wave value
  //   sinValue *= pow(10, 5);
  //   //sinValue += 1;
  //   int newSinValue = (int)sinValue;
  //   if (t == 154){
  //     Serial.println(t);
  //     Serial.println(sinValue);
  //   }
  //   // Serial.println(min_SINX);
  //   // Serial.println(max_SINX);
  //   // Serial.println(min_OMEGAT);
  //   // Serial.println(max_OMEGAT);
  //   int dacValue = map(sinValue, min_SINX * min_OMEGAT * pow(10,5), max_SINX * max_OMEGAT * pow(10,5), -2047, 2047) / 10; // convert to DAC value
  //   dacValue = dacValue * 10 + 2047;
  //   //Serial.println(dacValue);
  //   dac.setVoltage(dacValue, false); // send DAC value
  //   delayMicroseconds(1000); // wait for DAC to settle
  // }

  for(int i = 0; i < 1000; i++) {
    int dacValue = int(data[i]);

    dac.setVoltage(dacValue, false);
    delayMicroseconds(100);
  }
}


